### This file has been autogenerated from shape_model.ipynb on 12/12/2022 13:59:51 ###

__all__ = ['df2shapes','get_shapes']

import numpy as np
import pandas as pd
import torch as tc
import matplotlib.pyplot as plt
import menpo.io as mio
from functools import partial
from menpo.shape.pointcloud import PointCloud
from menpo.transform import AlignmentAffine
from menpofit.transform import DifferentiableAlignmentSimilarity
from menpofit.modelinstance import OrthoPDM, GlobalPDM
from menpowidgets import visualize_shape_model_2d
from tqdm.notebook import tqdm

def df2shapes(df):
    return [PointCloud(row[1].values.reshape(-1,2)[:,[1,0]]) for row in df.iterrows()]

def get_shapes(coeffs, shape_model=None, components=None, mean_shape=None, device=None):
    "Reconstructs shapes from a batch of weights and inverses."
    device,dtype = coeffs.device,coeffs.dtype
    if shape_model is not None:
        components = tc.tensor(shape_model.components)
        mean_shape = tc.tensor(shape_model._mean)
        # eigvals = tc.tensor(shape_model.eigenvalues)    
    components,mean_shape = components.to(device).type(dtype),mean_shape.to(device).type(dtype)

    b,n = coeffs.shape[0],mean_shape.shape[0]//2
    invs,weights = coeffs[:,:6],coeffs[:,6:]
    invs = tc.cat((invs, tc.zeros(b,2,dtype=dtype,device=device), tc.ones(b,1,dtype=dtype,device=device)), axis=-1)  # cat [0,0,1] row to the inverse matrix

    recon_normed = (mean_shape + weights @ components[:weights.shape[1]]).view(b,n,2)
    recon_normed = tc.cat((recon_normed, tc.ones((b,n,1),dtype=dtype,device=device)), axis=-1)
    recon = tc.einsum('bnm,bpm->bnp', recon_normed, invs.view(-1,3,3))[...,:2]  # equivalent to: tc.bmm(recon, invs.permute((0,2,1))))[...,:2]
    return recon

